# MiniSentry Environment Configuration
# Copy this file to .env and update the values for your environment

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database URL
# Format: postgres://username:password@host:port/database?sslmode=disable
DATABASE_URL=postgres://postgres:password@localhost:5433/minisentry?sslmode=disable

# Individual PostgreSQL settings (used by docker-compose.prod.yml)
POSTGRES_DB=minisentry
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your-secure-database-password-here
POSTGRES_PORT=5432

# =============================================================================
# REDIS CONFIGURATION (Optional - for caching and sessions)
# =============================================================================

# Redis URL
# Format: redis://[:password@]host:port[/database]
REDIS_URL=redis://localhost:6379

# Redis settings for production
REDIS_PASSWORD=your-secure-redis-password-here
REDIS_PORT=6379

# =============================================================================
# JWT AND AUTHENTICATION
# =============================================================================

# JWT Secret Key - MUST be changed in production!
# Generate with: openssl rand -base64 32
JWT_SECRET=your-256-bit-secret-key-change-in-production

# JWT Issuer
JWT_ISSUER=minisentry

# JWT Token Expiry (default: 15 minutes)
JWT_EXPIRY=15m

# Refresh Token Expiry (default: 7 days)
REFRESH_EXPIRY=168h

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server host and port
HOST=0.0.0.0
PORT=8080

# Frontend URL (for CORS and redirects)
FRONTEND_URL=http://localhost:3000

# DSN Host (for generating project DSNs)
DSN_HOST=http://localhost:8080

# Environment (development, staging, production)
ENVIRONMENT=development

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Allowed origins for CORS (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:5173

# =============================================================================
# RATE LIMITING
# =============================================================================

# Number of requests per window
RATE_LIMIT_REQUESTS=100

# Rate limit window duration
RATE_LIMIT_WINDOW=60s

# =============================================================================
# LOGGING
# =============================================================================

# Log level (debug, info, warn, error)
LOG_LEVEL=info

# Log format (json, text)
LOG_FORMAT=json

# =============================================================================
# EMAIL CONFIGURATION (Optional - for notifications)
# =============================================================================

# SMTP Configuration
EMAIL_SMTP_HOST=smtp.example.com
EMAIL_SMTP_PORT=587
EMAIL_SMTP_USER=your-smtp-username
EMAIL_SMTP_PASSWORD=your-smtp-password
EMAIL_FROM=noreply@yourdomain.com

# Email Features
EMAIL_NOTIFICATIONS_ENABLED=false

# =============================================================================
# PRODUCTION DEPLOYMENT (docker-compose.prod.yml)
# =============================================================================

# Domain Configuration
DOMAIN=yourdomain.com

# SSL/TLS Configuration
ACME_EMAIL=admin@yourdomain.com

# Frontend Build Configuration
VITE_API_URL=https://yourdomain.com
VITE_ENVIRONMENT=production

# Service Scaling
BACKEND_REPLICAS=2
FRONTEND_REPLICAS=2

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================

# Traefik Dashboard Authentication (generate with: htpasswd -nb user password)
TRAEFIK_DASHBOARD_AUTH=admin:$2y$10$example_hash_here
TRAEFIK_LOG_LEVEL=INFO

# Prometheus Authentication
PROMETHEUS_AUTH=admin:$2y$10$example_hash_here

# Grafana Configuration
GRAFANA_USER=admin
GRAFANA_PASSWORD=your-secure-grafana-password

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Backup Schedule (cron format)
BACKUP_SCHEDULE=0 2 * * *

# Backup Retention
BACKUP_KEEP_DAYS=7
BACKUP_KEEP_WEEKS=4
BACKUP_KEEP_MONTHS=6

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Security Headers
SECURITY_HSTS_MAX_AGE=31536000
SECURITY_CONTENT_TYPE_NOSNIFF=true
SECURITY_FRAME_DENY=true
SECURITY_XSS_PROTECTION=true

# Content Security Policy
CSP_DEFAULT_SRC='self'
CSP_SCRIPT_SRC='self' 'unsafe-inline'
CSP_STYLE_SRC='self' 'unsafe-inline'
CSP_IMG_SRC='self' data: https:
CSP_FONT_SRC='self' https:

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Development Database (for local development without Docker)
DEV_DATABASE_URL=postgres://postgres:password@localhost:5432/minisentry_dev?sslmode=disable

# Development Redis
DEV_REDIS_URL=redis://localhost:6379/0

# Hot Reload Settings
HOT_RELOAD=true
WATCH_FILES=true

# Debug Settings
DEBUG=false
VERBOSE_LOGGING=false

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Test Database
TEST_DATABASE_URL=postgres://postgres:password@localhost:5432/minisentry_test?sslmode=disable

# Test Redis
TEST_REDIS_URL=redis://localhost:6379/1

# Integration Test Settings
INTEGRATION_TEST_TIMEOUT=30s
INTEGRATION_TEST_BASE_URL=http://localhost:8080

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable/disable features
FEATURE_USER_REGISTRATION=true
FEATURE_EMAIL_NOTIFICATIONS=false
FEATURE_SLACK_INTEGRATION=false
FEATURE_GITHUB_INTEGRATION=false
FEATURE_PERFORMANCE_MONITORING=false

# =============================================================================
# THIRD-PARTY INTEGRATIONS
# =============================================================================

# Slack Integration (optional)
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token
SLACK_SIGNING_SECRET=your-slack-signing-secret

# GitHub Integration (optional)
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Sentry Integration (for monitoring MiniSentry itself)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# File Storage (for source maps, attachments)
STORAGE_TYPE=local
STORAGE_LOCAL_PATH=/var/lib/minisentry/storage

# S3 Configuration (if using S3 storage)
S3_BUCKET=minisentry-storage
S3_REGION=us-east-1
S3_ACCESS_KEY_ID=your-s3-access-key
S3_SECRET_ACCESS_KEY=your-s3-secret-key

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# Database Connection Pool
DB_MAX_OPEN_CONNECTIONS=25
DB_MAX_IDLE_CONNECTIONS=5
DB_CONNECTION_MAX_LIFETIME=300s

# Redis Connection Pool
REDIS_POOL_SIZE=10
REDIS_POOL_TIMEOUT=4s

# HTTP Server Settings
HTTP_READ_TIMEOUT=30s
HTTP_WRITE_TIMEOUT=30s
HTTP_IDLE_TIMEOUT=120s

# Memory Limits
MAX_REQUEST_SIZE=10MB
MAX_MULTIPART_MEMORY=32MB

# =============================================================================
# DEVELOPMENT OVERRIDES
# =============================================================================

# Override settings for local development
# These are automatically used when ENVIRONMENT=development

# Use local URLs for development
DEV_FRONTEND_URL=http://localhost:3000
DEV_DSN_HOST=http://localhost:8080

# Disable security features in development
DEV_SECURE_COOKIES=false
DEV_HTTPS_ONLY=false

# Enable debug features
DEV_ENABLE_PROFILER=true
DEV_ENABLE_DEBUG_ROUTES=true

# =============================================================================
# EXAMPLES AND DOCUMENTATION
# =============================================================================

# Example values for common configurations:

# Strong JWT Secret (generate new one for production):
# JWT_SECRET=mF8sP2kL9nQ4vR7xE1cA6dG3hJ5mN8qT4wE7rY9uI2oP5sD8fG1hK4lZ6xC9vB2n

# Production Database URL:
# DATABASE_URL=postgres://minisentry_user:secure_password@db.example.com:5432/minisentry?sslmode=require

# Production Redis URL:
# REDIS_URL=redis://:secure_password@redis.example.com:6379/0

# Production Frontend URL:
# FRONTEND_URL=https://errors.yourdomain.com

# Production CORS Origins:
# CORS_ORIGINS=https://errors.yourdomain.com,https://yourdomain.com

# =============================================================================
# SECURITY NOTES
# =============================================================================

# IMPORTANT SECURITY CONSIDERATIONS:
# 1. Change JWT_SECRET to a secure random value in production
# 2. Use strong passwords for database and Redis
# 3. Enable SSL/TLS for all connections in production
# 4. Set secure CORS origins (don't use wildcards in production)
# 5. Enable rate limiting and monitoring
# 6. Keep all secrets in secure environment variable stores
# 7. Regularly rotate passwords and secrets
# 8. Use HTTPS-only in production
# 9. Enable security headers and CSP
# 10. Monitor for security issues and keep dependencies updated

# =============================================================================
# GETTING STARTED
# =============================================================================

# For development:
# 1. Copy this file to .env
# 2. Update DATABASE_URL and REDIS_URL if needed
# 3. Generate a secure JWT_SECRET
# 4. Run: make dev

# For production:
# 1. Copy this file to .env
# 2. Update all passwords and secrets
# 3. Configure your domain and SSL
# 4. Set production URLs and CORS origins
# 5. Configure monitoring and backups
# 6. Run: docker-compose -f docker-compose.prod.yml up -d